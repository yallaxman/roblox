import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, filters, ContextTypes
from nickname_generator import NicknameGenerator
from config import TELEGRAM_BOT_TOKEN

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –Ω–∏–∫–Ω–µ–π–º–æ–≤
nickname_gen = NicknameGenerator()

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_states = {}

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    welcome_message = """
üéÆ *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Roblox Nickname Generator!*

–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Å–æ–∑–¥–∞—Ç—å –∫—Ä—É—Ç—ã–µ –Ω–∏–∫–Ω–µ–π–º—ã –¥–ª—è Roblox! 

–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
‚Ä¢ /generate - –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–ª—É—á–∞–π–Ω—ã–µ –Ω–∏–∫–Ω–µ–π–º—ã
‚Ä¢ /custom - –°–æ–∑–¥–∞—Ç—å –Ω–∏–∫–Ω–µ–π–º –ø–æ —Ç–≤–æ–∏–º –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è–º
‚Ä¢ /styles - –ü–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ç–∏–ª–∏
‚Ä¢ /help - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É

–í—ã–±–µ—Ä–∏ –∫–æ–º–∞–Ω–¥—É –∏–ª–∏ –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ!
    """
    
    keyboard = [
        [InlineKeyboardButton("üé≤ –°–ª—É—á–∞–π–Ω—ã–µ –Ω–∏–∫–Ω–µ–π–º—ã", callback_data="generate_random")],
        [InlineKeyboardButton("üé® –ö–∞—Å—Ç–æ–º–Ω—ã–µ –Ω–∏–∫–Ω–µ–π–º—ã", callback_data="custom_nickname")],
        [InlineKeyboardButton("üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ç–∏–ª–∏", callback_data="show_styles")],
        [InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å", callback_data="help")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(welcome_message, parse_mode='Markdown', reply_markup=reply_markup)

async def generate_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /generate"""
    await generate_random_nicknames(update, context)

async def generate_random_nicknames(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–µ –Ω–∏–∫–Ω–µ–π–º—ã"""
    user_id = update.effective_user.id
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ
    loading_message = await update.message.reply_text("üîÑ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –Ω–∏–∫–Ω–µ–π–º—ã...")
    
    try:
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–∏–∫–Ω–µ–π–º—ã
        nicknames = nickname_gen.generate_nickname()
        
        if nicknames and nicknames[0] not in ["ErrorGenerating", "ErrorParsing"]:
            response = "üéÆ *–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –Ω–∏–∫–Ω–µ–π–º—ã –¥–ª—è Roblox:*\n\n"
            for i, nickname in enumerate(nicknames, 1):
                response += f"{i}. `{nickname}`\n"
            
            response += "\nüí° *–°–æ–≤–µ—Ç—ã:*\n"
            response += "‚Ä¢ –°–∫–æ–ø–∏—Ä—É–π –Ω–∏–∫–Ω–µ–π–º –∏ –ø—Ä–æ–≤–µ—Ä—å –µ–≥–æ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –≤ Roblox\n"
            response += "‚Ä¢ –ü–æ–ø—Ä–æ–±—É–π –¥–æ–±–∞–≤–∏—Ç—å —Ü–∏—Ñ—Ä—ã, –µ—Å–ª–∏ –Ω–∏–∫–Ω–µ–π–º –∑–∞–Ω—è—Ç\n"
            response += "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π /custom –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–∏–∫–Ω–µ–π–º–∞ –ø–æ —Ç–≤–æ–∏–º –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è–º"
            
            # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
            keyboard = [
                [InlineKeyboardButton("üîÑ –ï—â–µ –Ω–∏–∫–Ω–µ–π–º—ã", callback_data="generate_random")],
                [InlineKeyboardButton("üé® –ö–∞—Å—Ç–æ–º–Ω—ã–µ", callback_data="custom_nickname")],
                [InlineKeyboardButton("üìã –°—Ç–∏–ª–∏", callback_data="show_styles")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await loading_message.edit_text(response, parse_mode='Markdown', reply_markup=reply_markup)
        else:
            await loading_message.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–∏–∫–Ω–µ–π–º–æ–≤. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ!")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–∏–∫–Ω–µ–π–º–æ–≤: {e}")
        await loading_message.edit_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ!")

async def custom_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /custom"""
    user_id = update.effective_user.id
    user_states[user_id] = "waiting_for_preference"
    
    message = """
üé® *–°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –Ω–∏–∫–Ω–µ–π–º–∞*

–û–ø–∏—à–∏, –∫–∞–∫–æ–π –Ω–∏–∫–Ω–µ–π–º —Ç—ã —Ö–æ—á–µ—à—å! –ù–∞–ø—Ä–∏–º–µ—Ä:
‚Ä¢ "–ö—Ä—É—Ç–æ–π –∏ —Å—Ç—Ä–∞—à–Ω—ã–π"
‚Ä¢ "–ú–∏–ª—ã–π –∏ —Ä–æ–∑–æ–≤—ã–π"
‚Ä¢ "–ö–æ—Å–º–∏—á–µ—Å–∫–∏–π –≤–æ–∏–Ω"
‚Ä¢ "–ê–Ω–∏–º–µ –ø–µ—Ä—Å–æ–Ω–∞–∂"
‚Ä¢ "–ö–∏–±–µ—Ä–ø–∞–Ω–∫ —Å—Ç–∏–ª—å"

–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ —Å–≤–æ–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –≤ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏!
    """
    
    await update.message.reply_text(message, parse_mode='Markdown')

async def handle_custom_preference(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –¥–ª—è –∫–∞—Å—Ç–æ–º–Ω—ã—Ö –Ω–∏–∫–Ω–µ–π–º–æ–≤"""
    user_id = update.effective_user.id
    
    if user_id in user_states and user_states[user_id] == "waiting_for_preference":
        preference = update.message.text
        
        # –£–¥–∞–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        del user_states[user_id]
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ
        loading_message = await update.message.reply_text("üé® –°–æ–∑–¥–∞—é –∫–∞—Å—Ç–æ–º–Ω—ã–µ –Ω–∏–∫–Ω–µ–π–º—ã...")
        
        try:
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–µ –Ω–∏–∫–Ω–µ–π–º—ã
            nicknames = nickname_gen.generate_custom_nickname(preference)
            
            if nicknames and nicknames[0] not in ["CustomError"]:
                response = f"üé® *–ö–∞—Å—Ç–æ–º–Ω—ã–µ –Ω–∏–∫–Ω–µ–π–º—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ:* `{preference}`\n\n"
                for i, nickname in enumerate(nicknames, 1):
                    response += f"{i}. `{nickname}`\n"
                
                response += "\nüí° *–°–æ–≤–µ—Ç—ã:*\n"
                response += "‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –Ω–∏–∫–Ω–µ–π–º–∞ –≤ Roblox\n"
                response += "‚Ä¢ –ü–æ–ø—Ä–æ–±—É–π /generate –¥–ª—è —Å–ª—É—á–∞–π–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤\n"
                
                keyboard = [
                    [InlineKeyboardButton("üîÑ –ï—â–µ –∫–∞—Å—Ç–æ–º–Ω—ã–µ", callback_data="custom_nickname")],
                    [InlineKeyboardButton("üé≤ –°–ª—É—á–∞–π–Ω—ã–µ", callback_data="generate_random")]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                
                await loading_message.edit_text(response, parse_mode='Markdown', reply_markup=reply_markup)
            else:
                await loading_message.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–∞—Å—Ç–æ–º–Ω—ã—Ö –Ω–∏–∫–Ω–µ–π–º–æ–≤. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ!")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–∞—Å—Ç–æ–º–Ω—ã—Ö –Ω–∏–∫–Ω–µ–π–º–æ–≤: {e}")
            await loading_message.edit_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ!")

async def styles_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /styles"""
    await show_styles(update, context)

async def show_styles(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ç–∏–ª–∏ –Ω–∏–∫–Ω–µ–π–º–æ–≤"""
    styles_message = """
üìã *–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ç–∏–ª–∏ –Ω–∏–∫–Ω–µ–π–º–æ–≤:*

üéÆ **–ò–≥—Ä–æ–≤—ã–µ —Å—Ç–∏–ª–∏:**
‚Ä¢ –ö—Ä—É—Ç—ã–µ –∏ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–µ
‚Ä¢ –ú–∏–ª—ã–µ –∏ –∫–∞–≤–∞–π–Ω—ã–µ
‚Ä¢ –ö–∏–±–µ—Ä–ø–∞–Ω–∫ –∏ —Ñ—É—Ç—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ
‚Ä¢ –§—ç–Ω—Ç–µ–∑–∏ –∏ –º–∞–≥–∏—á–µ—Å–∫–∏–µ
‚Ä¢ –ö–æ—Å–º–∏—á–µ—Å–∫–∏–µ –∏ –≥–∞–ª–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ

üé® **–¢–µ–º—ã:**
‚Ä¢ –ê–Ω–∏–º–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∏
‚Ä¢ –°—É–ø–µ—Ä–≥–µ—Ä–æ–∏
‚Ä¢ –í–∏–∫–∏–Ω–≥–∏ –∏ –≤–æ–∏–Ω—ã
‚Ä¢ –ö–æ—Å–º–æ–Ω–∞–≤—Ç—ã –∏ –ø–∏–ª–æ—Ç—ã
‚Ä¢ –ú–∞–≥–∏ –∏ –≤–æ–ª—à–µ–±–Ω–∏–∫–∏
‚Ä¢ –†–æ–±–æ—Ç—ã –∏ –∞–Ω–¥—Ä–æ–∏–¥—ã

üí° *–ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /custom —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –Ω–∏–∫–Ω–µ–π–º –≤ –ª—é–±–æ–º —Å—Ç–∏–ª–µ!*
    """
    
    keyboard = [
        [InlineKeyboardButton("üé≤ –°–ª—É—á–∞–π–Ω—ã–µ –Ω–∏–∫–Ω–µ–π–º—ã", callback_data="generate_random")],
        [InlineKeyboardButton("üé® –ö–∞—Å—Ç–æ–º–Ω—ã–µ –Ω–∏–∫–Ω–µ–π–º—ã", callback_data="custom_nickname")],
        [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="start")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(styles_message, parse_mode='Markdown', reply_markup=reply_markup)

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    await show_help(update, context)

async def show_help(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø—Ä–∞–≤–∫—É"""
    help_message = """
‚ùì *–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞*

üéÆ **–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
‚Ä¢ `/start` - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
‚Ä¢ `/generate` - –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–ª—É—á–∞–π–Ω—ã–µ –Ω–∏–∫–Ω–µ–π–º—ã
‚Ä¢ `/custom` - –°–æ–∑–¥–∞—Ç—å –∫–∞—Å—Ç–æ–º–Ω—ã–π –Ω–∏–∫–Ω–µ–π–º
‚Ä¢ `/styles` - –ü–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ç–∏–ª–∏
‚Ä¢ `/help` - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

üí° **–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:**
1. –í—ã–±–µ—Ä–∏ –∫–æ–º–∞–Ω–¥—É –∏–ª–∏ –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É
2. –î–ª—è –∫–∞—Å—Ç–æ–º–Ω—ã—Ö –Ω–∏–∫–Ω–µ–π–º–æ–≤ –æ–ø–∏—à–∏ —Å–≤–æ–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è
3. –°–∫–æ–ø–∏—Ä—É–π –ø–æ–Ω—Ä–∞–≤–∏–≤—à–∏–π—Å—è –Ω–∏–∫–Ω–µ–π–º
4. –ü—Ä–æ–≤–µ—Ä—å –µ–≥–æ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –≤ Roblox

‚ö†Ô∏è **–í–∞–∂–Ω–æ:**
‚Ä¢ –ù–∏–∫–Ω–µ–π–º—ã –≥–µ–Ω–µ—Ä–∏—Ä—É—é—Ç—Å—è —Å –ø–æ–º–æ—â—å—é –ò–ò
‚Ä¢ –í—Å–µ–≥–¥–∞ –ø—Ä–æ–≤–µ—Ä—è–π –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –≤ Roblox
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã –∏ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è
‚Ä¢ –î–ª–∏–Ω–∞ –Ω–∏–∫–Ω–µ–π–º–∞: 3-20 —Å–∏–º–≤–æ–ª–æ–≤

üÜò **–ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç:**
–ü–æ–ø—Ä–æ–±—É–π –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /start
    """
    
    keyboard = [
        [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="start")],
        [InlineKeyboardButton("üé≤ –°–ª—É—á–∞–π–Ω—ã–µ –Ω–∏–∫–Ω–µ–π–º—ã", callback_data="generate_random")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(help_message, parse_mode='Markdown', reply_markup=reply_markup)

async def button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
    query = update.callback_query
    await query.answer()
    
    if query.data == "generate_random":
        # –°–æ–∑–¥–∞–µ–º —Ñ–µ–π–∫–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        fake_message = type('obj', (object,), {
            'reply_text': lambda text, **kwargs: query.edit_message_text(text, **kwargs),
            'message': query.message,
            'effective_user': query.from_user
        })()
        await generate_random_nicknames(fake_message, context)
        
    elif query.data == "custom_nickname":
        user_id = query.from_user.id
        user_states[user_id] = "waiting_for_preference"
        
        message = """
üé® *–°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –Ω–∏–∫–Ω–µ–π–º–∞*

–û–ø–∏—à–∏, –∫–∞–∫–æ–π –Ω–∏–∫–Ω–µ–π–º —Ç—ã —Ö–æ—á–µ—à—å! –ù–∞–ø—Ä–∏–º–µ—Ä:
‚Ä¢ "–ö—Ä—É—Ç–æ–π –∏ —Å—Ç—Ä–∞—à–Ω—ã–π"
‚Ä¢ "–ú–∏–ª—ã–π –∏ —Ä–æ–∑–æ–≤—ã–π"
‚Ä¢ "–ö–æ—Å–º–∏—á–µ—Å–∫–∏–π –≤–æ–∏–Ω"
‚Ä¢ "–ê–Ω–∏–º–µ –ø–µ—Ä—Å–æ–Ω–∞–∂"
‚Ä¢ "–ö–∏–±–µ—Ä–ø–∞–Ω–∫ —Å—Ç–∏–ª—å"

–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ —Å–≤–æ–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –≤ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏!
        """
        
        keyboard = [
            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="start")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(message, parse_mode='Markdown', reply_markup=reply_markup)
        
    elif query.data == "show_styles":
        await show_styles(query, context)
        
    elif query.data == "help":
        await show_help(query, context)
        
    elif query.data == "start":
        await start(query, context)

async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è {update}: {context.error}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(TELEGRAM_BOT_TOKEN).build()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("generate", generate_command))
    application.add_handler(CommandHandler("custom", custom_command))
    application.add_handler(CommandHandler("styles", styles_command))
    application.add_handler(CommandHandler("help", help_command))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫
    application.add_handler(CallbackQueryHandler(button_callback))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∫–∞—Å—Ç–æ–º–Ω—ã—Ö –Ω–∏–∫–Ω–µ–π–º–æ–≤
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_custom_preference))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
    application.add_error_handler(error_handler)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω! –ù–∞–∂–º–∏ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏.")
    application.run_polling()

if __name__ == '__main__':
    main()